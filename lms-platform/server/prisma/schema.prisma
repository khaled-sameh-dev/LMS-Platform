

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  useLibraryImports = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Course{
  id String @id @default(uuid()) @map("_id")
  title String
  description String
  imageUrl String
  price Float
  level CourseLevel @default(BEGINNER)
  isPublished Boolean @default(false)
  isFree Boolean @default(true)

  teacher Teacher? @relation(fields: [teacherId] , references: [id])
  teacherId String?

  category Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  sections Section[]

  enrollments Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Category{
  id String @id @default(uuid()) @map("_id")
  name String
  slug String @unique
  courses Course[]
}

model Teacher{
  id String @id @default(uuid()) @map("_id")
  name String
  bio String
  avatarUrl String
  courses Course[]
}

model Student{
  id String @id @default(uuid()) @map("_id")
  name String
  email String @unique
  avatarUrl String

  enrollments Enrollment[]
}

model Section{
  id String @id @default(uuid()) @map("_id")
  title String
  description String
  order Int

  course Course @relation(fields: [courseId], references: [id])
  courseId String

  chapters Chapter[]
  ceatedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter{
  id String @id @default(uuid()) @map("_id")
  title String
  description String
  order Int

  videoUrl String?
  duration Float?

  content String?

  section Section @relation(fields: [sectionId], references: [id])
  sectionId String

  attachments Attachment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

model Attachment{
  id String @id @default(uuid()) @map("_id")
  filename String
  url String
  type String

  chapter Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?
}



model Enrollment{
  id String @id @default(uuid()) @map("_id")
  enrolledAt DateTime @default(now())
  progress Float @default(0.0)
  completed Boolean @default(false)

  student Student? @relation(fields: [studentId] , references: [id])
  studentId String?

  course Course? @relation(fields: [courseId] , references: [id])
  courseId String?
}